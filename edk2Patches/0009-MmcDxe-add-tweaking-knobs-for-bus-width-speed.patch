From 326a3f44996acf6afcc7ff4f00694f4852622f0b Mon Sep 17 00:00:00 2001
From: Andrei Warkentin <andrey.warkentin@gmail.com>
Date: Sun, 17 Jun 2018 12:40:01 -0400
Subject: [PATCH 9/9] MmcDxe: add tweaking knobs for bus width, speed.

- Pcd for forcing 1 bit mode.
- Pcd for forcing SD DS mode.
- Pcd for overriding SD DS clock.
- Pcd for overriding SD HS clock.

Signed-off-by: Andrei Warkentin <andrey.warkentin@gmail.com>
---
 EmbeddedPkg/EmbeddedPkg.dec                      |  6 +++
 EmbeddedPkg/Universal/MmcDxe/MmcDxe.inf          |  6 +++
 EmbeddedPkg/Universal/MmcDxe/MmcIdentification.c | 51 +++++++++++++++++++++---
 3 files changed, 57 insertions(+), 6 deletions(-)

diff --git a/EmbeddedPkg/EmbeddedPkg.dec b/EmbeddedPkg/EmbeddedPkg.dec
index 179c1b1..f691fcf 100644
--- a/EmbeddedPkg/EmbeddedPkg.dec
+++ b/EmbeddedPkg/EmbeddedPkg.dec
@@ -194,3 +194,9 @@
   # truncation on overflow to specify negative offsets.
   #
   gEmbeddedTokenSpaceGuid.PcdDmaDeviceOffset|0x0|UINT64|0x0000058
+
+[PcdsFixedAtBuild, PcdsPatchableInModule, PcdsDynamic, PcdsDynamicEx]
+  gEmbeddedTokenSpaceGuid.PcdMmcForce1Bit|0|UINT32|0x00010000
+  gEmbeddedTokenSpaceGuid.PcdMmcForceDefaultSpeed|0|UINT32|0x00010001
+  gEmbeddedTokenSpaceGuid.PcdMmcSdDefaultSpeedMHz|0|UINT32|0x00010002
+  gEmbeddedTokenSpaceGuid.PcdMmcSdHighSpeedMHz|0|UINT32|0x00010003
\ No newline at end of file
diff --git a/EmbeddedPkg/Universal/MmcDxe/MmcDxe.inf b/EmbeddedPkg/Universal/MmcDxe/MmcDxe.inf
index a07288c..5074f6f 100644
--- a/EmbeddedPkg/Universal/MmcDxe/MmcDxe.inf
+++ b/EmbeddedPkg/Universal/MmcDxe/MmcDxe.inf
@@ -47,5 +47,11 @@
   gEfiMmcHostProtocolGuid
   gEfiDriverDiagnostics2ProtocolGuid
 
+[Pcd]
+  gEmbeddedTokenSpaceGuid.PcdMmcForce1Bit
+  gEmbeddedTokenSpaceGuid.PcdMmcForceDefaultSpeed
+  gEmbeddedTokenSpaceGuid.PcdMmcSdDefaultSpeedMHz
+  gEmbeddedTokenSpaceGuid.PcdMmcSdHighSpeedMHz
+
 [Depex]
   TRUE
diff --git a/EmbeddedPkg/Universal/MmcDxe/MmcIdentification.c b/EmbeddedPkg/Universal/MmcDxe/MmcIdentification.c
index ccd500b..2108cf2 100755
--- a/EmbeddedPkg/Universal/MmcDxe/MmcIdentification.c
+++ b/EmbeddedPkg/Universal/MmcDxe/MmcIdentification.c
@@ -264,16 +264,30 @@ InitializeEmmcDevice (
   EFI_STATUS Status = EFI_SUCCESS;
   ECSD       *ECSDData;
   UINT32     BusClockFreq, Idx, BusMode;
+  UINT32     BusWidth = 8;
   UINT32     TimingMode[4] = {EMMCHS52DDR1V2, EMMCHS52DDR1V8, EMMCHS52, EMMCHS26};
 
   Host  = MmcHostInstance->MmcHost;
   ECSDData = MmcHostInstance->CardInfo.ECSDData;
-  if (ECSDData->DEVICE_TYPE == EMMCBACKWARD)
+  if (ECSDData->DEVICE_TYPE == EMMCBACKWARD){
     return EFI_SUCCESS;
+  }
+
+  if (PcdGet32(PcdMmcForceDefaultSpeed)) {
+    DEBUG((DEBUG_WARN, "Forcing default speed mode\n"));
+    return EFI_SUCCESS;
+  }
+
+  if (PcdGet32(PcdMmcForce1Bit)) {
+    DEBUG((DEBUG_WARN, "Forcing 1 bit mode\n"));
+    BusWidth = 1;
+  }
 
   if (!MMC_HOST_HAS_SETIOS(Host)) {
+    DEBUG((DEBUG_ERROR, "Controller doesn't support speed / bus width change\n"));
     return EFI_SUCCESS;
   }
+
   Status = EmmcSetEXTCSD (MmcHostInstance, EXTCSD_HS_TIMING, EMMC_TIMING_HS);
   if (EFI_ERROR (Status)) {
     DEBUG ((DEBUG_ERROR, "InitializeEmmcDevice(): Failed to switch high speed mode, Status:%r.\n", Status));
@@ -293,7 +307,7 @@ InitializeEmmcDevice (
     default:
       return EFI_UNSUPPORTED;
     }
-    Status = Host->SetIos (Host, BusClockFreq, 8, TimingMode[Idx]);
+    Status = Host->SetIos (Host, BusClockFreq, BusWidth, TimingMode[Idx]);
     if (!EFI_ERROR (Status)) {
       switch (TimingMode[Idx]) {
       case EMMCHS52DDR1V2:
@@ -419,8 +433,13 @@ SdSet4Bit(
   EFI_STATUS Status;
   EFI_MMC_HOST_PROTOCOL *MmcHost = MmcHostInstance->MmcHost;
 
+  if (PcdGet32(PcdMmcForce1Bit)) {
+    DEBUG((DEBUG_WARN, "Forcing 1 bit mode\n"));
+    return EFI_SUCCESS;
+  }
+
   if (!MMC_HOST_HAS_SETIOS(MmcHost)) {
-    DEBUG((DEBUG_ERROR, "Controller doesn't support bus width change\n"));
+    DEBUG((DEBUG_WARN, "Controller doesn't support bus width change\n"));
     return EFI_SUCCESS;
   }
 
@@ -457,18 +476,26 @@ SdSetSpeed(
   IN  BOOLEAN CccSwitch
   )
 {
+  UINT32 Speed;
   UINT32 CmdArg;
   EFI_STATUS Status;
   UINT32 Buffer[16];
   UINT32 Response[4];
-  UINT32 Speed = SD_DEFAULT_SPEED;
   EFI_MMC_HOST_PROTOCOL *MmcHost = MmcHostInstance->MmcHost;
 
   if (!MMC_HOST_HAS_SETIOS(MmcHost)) {
-    DEBUG((DEBUG_ERROR, "Controller doesn't support speed change\n"));
+    DEBUG((DEBUG_WARN, "Controller doesn't support speed change\n"));
     return EFI_SUCCESS;
   }
 
+  Speed = PcdGet32(PcdMmcSdDefaultSpeedMHz) * 1000000;
+  if (Speed == 0) {
+    Speed = SD_DEFAULT_SPEED;
+  } else {
+    DEBUG((DEBUG_INFO, "Using default speed override %u Hz\n",
+           Speed));
+  }
+
   /*
    * First set base speed. We'll then try HS.
    */
@@ -479,6 +506,11 @@ SdSetSpeed(
     return Status;
   }
 
+  if (PcdGet32(PcdMmcForceDefaultSpeed)) {
+    DEBUG((DEBUG_WARN, "Forcing default speed mode\n"));
+    return EFI_SUCCESS;
+  }
+
   if (!CccSwitch) {
     return EFI_SUCCESS;
   }
@@ -536,7 +568,14 @@ SdSetSpeed(
   SdGetCsd(MmcHostInstance, Response, TRUE);
   SdSelect(MmcHostInstance);
 
-  Speed = SD_HIGH_SPEED;
+  Speed = PcdGet32(PcdMmcSdHighSpeedMHz) * 1000000;
+  if (Speed == 0) {
+    Speed = SD_HIGH_SPEED;
+  } else {
+    DEBUG((DEBUG_INFO, "Using high speed override %u Hz\n",
+           Speed));
+  }
+
   Status = MmcHost->SetIos (MmcHost, Speed, 0, EMMCBACKWARD);
   if (EFI_ERROR (Status)) {
     DEBUG((DEBUG_ERROR, "%a: error setting speed %u: %r\n",
-- 
2.5.3

