From cadf8cdf82cdd41ab5f20703ff2ec49164c0ce12 Mon Sep 17 00:00:00 2001
From: Andrei Warkentin <andrey.warkentin@gmail.com>
Date: Sat, 16 Jun 2018 02:55:52 -0400
Subject: [PATCH 08/10] MmcDxe: deal with slow cards

Some bad cards slow down to a crawl in 4-bit mode and
a train of CMD24 writes start timing out. So we ought to
wait until card exits the programming state.

This was already done, but the timeout was arbitrary, and not
coupled to physical time. Make it 1sec (the limits in the SD
simplified spec are much smaller).

Also, refactor since the waiting is done in a few places.

Signed-off-by: Andrei Warkentin <andrey.warkentin@gmail.com>
---
 EmbeddedPkg/Universal/MmcDxe/MmcBlockIo.c | 128 ++++++++++++------------------
 1 file changed, 52 insertions(+), 76 deletions(-)

diff --git a/EmbeddedPkg/Universal/MmcDxe/MmcBlockIo.c b/EmbeddedPkg/Universal/MmcDxe/MmcBlockIo.c
index a2b9232..00e9bb3 100644
--- a/EmbeddedPkg/Universal/MmcDxe/MmcBlockIo.c
+++ b/EmbeddedPkg/Universal/MmcDxe/MmcBlockIo.c
@@ -16,52 +16,57 @@
 
 #include "Mmc.h"
 
-EFI_STATUS
-MmcNotifyState (
-  IN MMC_HOST_INSTANCE *MmcHostInstance,
-  IN MMC_STATE State
-  )
-{
-  MmcHostInstance->State = State;
-  return MmcHostInstance->MmcHost->NotifyState (MmcHostInstance->MmcHost, State);
-}
+#define MMCI0_BLOCKLEN 512
+#define MMCI0_TIMEOUT  1000
 
+STATIC
 EFI_STATUS
-EFIAPI
-MmcGetCardStatus (
-  IN MMC_HOST_INSTANCE     *MmcHostInstance
+WaitUntilTran(
+  IN MMC_HOST_INSTANCE *MmcHostInstance
   )
 {
-  EFI_STATUS              Status;
-  UINT32                  Response[4];
-  UINTN                   CmdArg;
-  EFI_MMC_HOST_PROTOCOL   *MmcHost;
+  INTN Timeout;
+  UINT32 Response[1];
+  EFI_STATUS Status = EFI_SUCCESS;
+  EFI_MMC_HOST_PROTOCOL *MmcHost = MmcHostInstance->MmcHost;
 
-  Status = EFI_SUCCESS;
-  MmcHost = MmcHostInstance->MmcHost;
-  CmdArg = 0;
+  Response[0] = 0;
+  Timeout = MMCI0_TIMEOUT;
+  while(!EFI_ERROR (Status)
+        && !(Response[0] & MMC_R0_READY_FOR_DATA)
+        && (MMC_R0_CURRENTSTATE(Response) != MMC_R0_STATE_TRAN)
+        && Timeout--) {
+    Status = MmcHost->SendCommand (MmcHost, MMC_CMD13,
+                                   MmcHostInstance->CardInfo.RCA << 16);
+    if (!EFI_ERROR (Status)) {
+      MmcHost->ReceiveResponse (MmcHost, MMC_RESPONSE_TYPE_R1, Response);
+      if (Response[0] & MMC_R0_READY_FOR_DATA) {
+        break;
+      }
+    }
 
-  if (MmcHost == NULL) {
-    return EFI_INVALID_PARAMETER;
+    gBS->Stall(1000);
   }
-  if (MmcHostInstance->State != MmcHwInitializationState) {
-    //Get the Status of the card.
-    CmdArg = MmcHostInstance->CardInfo.RCA << 16;
-    Status = MmcHost->SendCommand (MmcHost, MMC_CMD13, CmdArg);
-    if (EFI_ERROR (Status)) {
-      DEBUG ((EFI_D_ERROR, "MmcGetCardStatus(MMC_CMD13): Error and Status = %r\n", Status));
-      return Status;
-    }
 
-    //Read Response
-    MmcHost->ReceiveResponse (MmcHost, MMC_RESPONSE_TYPE_R1, Response);
-    PrintResponseR1 (Response[0]);
+  if (0 == Timeout) {
+    DEBUG ((EFI_D_ERROR, "Card is busy\n"));
+    return EFI_NOT_READY;
   }
 
   return Status;
 }
 
 EFI_STATUS
+MmcNotifyState (
+  IN MMC_HOST_INSTANCE *MmcHostInstance,
+  IN MMC_STATE State
+  )
+{
+  MmcHostInstance->State = State;
+  return MmcHostInstance->MmcHost->NotifyState (MmcHostInstance->MmcHost, State);
+}
+
+EFI_STATUS
 EFIAPI
 MmcReset (
   IN EFI_BLOCK_IO_PROTOCOL    *This,
@@ -123,9 +128,6 @@ MmcStopTransmission (
   return Status;
 }
 
-#define MMCI0_BLOCKLEN 512
-#define MMCI0_TIMEOUT  10000
-
 STATIC
 EFI_STATUS
 MmcTransferBlock (
@@ -139,11 +141,10 @@ MmcTransferBlock (
   )
 {
   EFI_STATUS              Status;
-  UINTN                   CmdArg;
-  INTN                    Timeout;
   UINT32                  Response[4];
   MMC_HOST_INSTANCE       *MmcHostInstance;
   EFI_MMC_HOST_PROTOCOL   *MmcHost;
+  UINTN                   CmdArg;
 
   MmcHostInstance = MMC_HOST_INSTANCE_FROM_BLOCK_IO_THIS (This);
   MmcHost = MmcHostInstance->MmcHost;
@@ -158,7 +159,8 @@ MmcTransferBlock (
 
   Status = MmcHost->SendCommand (MmcHost, Cmd, CmdArg);
   if (EFI_ERROR (Status)) {
-    DEBUG ((EFI_D_ERROR, "%a(MMC_CMD%d): Error %r\n", __func__, Cmd, Status));
+    DEBUG ((EFI_D_ERROR, "%a(MMC_CMD%d): Error %r\n", __func__,
+            MMC_INDX(Cmd), Status));
     return Status;
   }
 
@@ -185,20 +187,10 @@ MmcTransferBlock (
     }
   }
 
-  // Command 13 - Read status and wait for programming to complete (return to tran)
-  Timeout = MMCI0_TIMEOUT;
-  CmdArg = MmcHostInstance->CardInfo.RCA << 16;
-  Response[0] = 0;
-  while(!(Response[0] & MMC_R0_READY_FOR_DATA)
-        && (MMC_R0_CURRENTSTATE (Response) != MMC_R0_STATE_TRAN)
-        && Timeout--) {
-    Status = MmcHost->SendCommand (MmcHost, MMC_CMD13, CmdArg);
-    if (!EFI_ERROR (Status)) {
-      MmcHost->ReceiveResponse (MmcHost, MMC_RESPONSE_TYPE_R1, Response);
-      if (Response[0] & MMC_R0_READY_FOR_DATA) {
-        break;  // Prevents delay once finished
-      }
-    }
+  // Wait for programming to complete, returning to transfer state.
+  Status = WaitUntilTran(MmcHostInstance);
+  if (EFI_ERROR (Status)) {
+    return Status;
   }
 
   if (BufferSize > This->Media->BlockSize) {
@@ -227,10 +219,7 @@ MmcIoBlocks (
   OUT VOID                    *Buffer
   )
 {
-  UINT32                  Response[4];
   EFI_STATUS              Status;
-  UINTN                   CmdArg;
-  INTN                    Timeout;
   UINTN                   Cmd;
   MMC_HOST_INSTANCE       *MmcHostInstance;
   EFI_MMC_HOST_PROTOCOL   *MmcHost;
@@ -287,23 +276,10 @@ MmcIoBlocks (
 
   BytesRemainingToBeTransfered = BufferSize;
   while (BytesRemainingToBeTransfered > 0) {
-
-    // Check if the Card is in Ready status
-    CmdArg = MmcHostInstance->CardInfo.RCA << 16;
-    Response[0] = 0;
-    Timeout = 20;
-    while(   (!(Response[0] & MMC_R0_READY_FOR_DATA))
-          && (MMC_R0_CURRENTSTATE (Response) != MMC_R0_STATE_TRAN)
-          && Timeout--) {
-      Status = MmcHost->SendCommand (MmcHost, MMC_CMD13, CmdArg);
-      if (!EFI_ERROR (Status)) {
-        MmcHost->ReceiveResponse (MmcHost, MMC_RESPONSE_TYPE_R1, Response);
-      }
-    }
-
-    if (0 == Timeout) {
-      DEBUG ((EFI_D_ERROR, "The Card is busy\n"));
-      return EFI_NOT_READY;
+    // Wait for programming to complete, returning to transfer state.
+    Status = WaitUntilTran(MmcHostInstance);
+    if (EFI_ERROR (Status)) {
+      return Status;
     }
 
     if (Transfer == MMC_IOBLOCKS_READ) {
@@ -311,16 +287,16 @@ MmcIoBlocks (
         // Read a single block
         Cmd = MMC_CMD17;
       } else {
-	// Read multiple blocks
-	Cmd = MMC_CMD18;
+        // Read multiple blocks
+        Cmd = MMC_CMD18;
       }
     } else {
       if (BlockCount == 1) {
         // Write a single block
         Cmd = MMC_CMD24;
       } else {
-	// Write multiple blocks
-	Cmd = MMC_CMD25;
+        // Write multiple blocks
+        Cmd = MMC_CMD25;
       }
     }
 
-- 
2.5.3

