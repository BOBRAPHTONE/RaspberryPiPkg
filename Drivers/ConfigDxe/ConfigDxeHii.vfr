/** @file
 *
 *  Copyright (c), 2018, Andrei Warkentin <andrey.warkentin@gmail.com>
 *
 *  This program and the accompanying materials
 *  are licensed and made available under the terms and conditions of the BSD License
 *  which accompanies this distribution.  The full text of the license may be found at
 *  http://opensource.org/licenses/bsd-license.php
 *
 *  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
 *
 **/

#include <Guid/HiiPlatformSetupFormset.h>
#include "ConfigDxeFormSetGuid.h"

typedef struct {
  /*
   * 0 - boot in EL2, hypervisor disabled.
   * 1 - boot in EL1, hypervisor enabled.
   */
  UINT32 Enable;
} HYP_ENABLE_VARSTORE_DATA;

typedef struct {
  UINT32 Mask;
} HYP_LOG_MASK_VARSTORE_DATA;

typedef struct {
  UINT32 Enable;
} HYP_WIN_DBG_HOOK_VARSTORE_DATA;

typedef struct {
  UINT32 Mask;
} HYP_WIN2000_MASK_VARSTORE_DATA;

typedef struct {
  /*
   * 0 - don't change the clock rate.
   * 1 - 600MHz.
   * 2 - maximum.
   */
  UINT32 Clock;
} CHIPSET_CPU_CLOCK_VARSTORE_DATA;

typedef struct {
  /*
   * 0 - uSD slot routed to Broadcom SDHOST.
   * 1 - uSD slot routed to Arasan SDHCI.
   */
  UINT32 Routing;
} CHIPSET_SD_VARSTORE_DATA;

typedef struct {
  /*
   * 0 - Don't force 1 bit mode.
   * 1 - Force 1 bit mode.
   */
  UINT32 Force1Bit;
} MMC_FORCE1BIT_VARSTORE_DATA;

typedef struct {
  /*
   * 0 - Don't force default speed.
   * 1 - Force default speed.
   */
  UINT32 ForceDS;
} MMC_FORCEDS_VARSTORE_DATA;

typedef struct {
  /*
   * Default Speed MHz override (25MHz default).
   */
  UINT32 MHz;
} MMC_SD_DS_MHZ_VARSTORE_DATA;

typedef struct {
  /*
   * High Speed MHz override (50MHz default).
   */
  UINT32 MHz;
} MMC_SD_HS_MHZ_VARSTORE_DATA;

//
// EFI Variable attributes
//
#define EFI_VARIABLE_NON_VOLATILE       0x00000001
#define EFI_VARIABLE_BOOTSERVICE_ACCESS 0x00000002
#define EFI_VARIABLE_RUNTIME_ACCESS     0x00000004
#define EFI_VARIABLE_READ_ONLY          0x00000008

formset
    guid      = CONFIGDXE_FORM_SET_GUID,
    title     = STRING_TOKEN(STR_FORM_SET_TITLE),
    help      = STRING_TOKEN(STR_FORM_SET_TITLE_HELP),
    classguid = EFI_HII_PLATFORM_SETUP_FORMSET_GUID,

    efivarstore HYP_ENABLE_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = HypEnable,
      guid  = CONFIGDXE_FORM_SET_GUID;

    efivarstore HYP_LOG_MASK_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = HypLogMask,
      guid  = CONFIGDXE_FORM_SET_GUID;

    efivarstore HYP_WIN_DBG_HOOK_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = HypWindowsDebugHook,
      guid  = CONFIGDXE_FORM_SET_GUID;

    efivarstore HYP_WIN2000_MASK_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = HypWin2000Mask,
      guid  = CONFIGDXE_FORM_SET_GUID;

    efivarstore CHIPSET_CPU_CLOCK_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuClock,
      guid  = CONFIGDXE_FORM_SET_GUID;

    efivarstore CHIPSET_SD_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = SdIsArasan,
      guid  = CONFIGDXE_FORM_SET_GUID;

    efivarstore MMC_FORCE1BIT_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = MmcForce1Bit,
      guid  = CONFIGDXE_FORM_SET_GUID;

    efivarstore MMC_FORCEDS_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = MmcForceDefaultSpeed,
      guid  = CONFIGDXE_FORM_SET_GUID;

    efivarstore MMC_SD_DS_MHZ_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = MmcSdDefaultSpeedMHz,
      guid  = CONFIGDXE_FORM_SET_GUID;

    efivarstore MMC_SD_HS_MHZ_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = MmcSdHighSpeedMHz,
      guid  = CONFIGDXE_FORM_SET_GUID;

    form formid = 1,
        title  = STRING_TOKEN(STR_FORM_SET_TITLE);
        subtitle text = STRING_TOKEN(STR_NULL_STRING);

        goto 0x1000,
            prompt = STRING_TOKEN(STR_HYP_FORM_TITLE),
            help = STRING_TOKEN(STR_NULL_STRING);

        goto 0x1001,
           prompt = STRING_TOKEN(STR_CHIPSET_FORM_TITLE),
           help = STRING_TOKEN(STR_NULL_STRING);

        goto 0x1002,
           prompt = STRING_TOKEN(STR_MMC_FORM_TITLE),
           help = STRING_TOKEN(STR_NULL_STRING);
    endform;

    form formid = 0x1000,
        title  = STRING_TOKEN(STR_HYP_FORM_TITLE);
        subtitle text = STRING_TOKEN(STR_HYP_FORM_SUBTITLE);

        oneof varid = HypEnable.Enable,
            prompt      = STRING_TOKEN(STR_HYP_EL_PROMPT),
            help        = STRING_TOKEN(STR_HYP_EL_HELP),
            flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            option text = STRING_TOKEN(STR_HYP_EL_EL2), value = 0, flags = 0;
            option text = STRING_TOKEN(STR_HYP_EL_EL1), value = 1, flags = DEFAULT;
        endoneof;

        grayoutif ideqval HypEnable.Enable == 0;
            numeric varid = HypLogMask.Mask,
                prompt  = STRING_TOKEN(STR_HYP_LOG_MASK_PROMPT),
                help    = STRING_TOKEN(STR_HYP_LOG_MASK_HELP),
                flags   = DISPLAY_UINT_HEX | NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
                minimum = 0,
                maximum = 0xffffffff,
                default = 0,
            endnumeric;

            oneof varid = HypWindowsDebugHook.Enable,
                prompt      = STRING_TOKEN(STR_HYP_WIN_DBG_HOOK_PROMPT),
                help        = STRING_TOKEN(STR_HYP_WIN_DBG_HOOK_HELP),
                flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
                option text = STRING_TOKEN(STR_HYP_WIN_DBG_HOOK_NO), value = 0, flags = DEFAULT;
                option text = STRING_TOKEN(STR_HYP_WIN_DBG_HOOK_YES), value = 1, flags = 0;
            endoneof;

            numeric varid = HypWin2000Mask.Mask,
                prompt  = STRING_TOKEN(STR_HYP_WIN2000_MASK_PROMPT),
                help    = STRING_TOKEN(STR_HYP_WIN2000_MASK_HELP),
                flags   = DISPLAY_UINT_HEX | NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
                minimum = 0,
                maximum = 0xffffffff,
                default = 0,
            endnumeric;
        endif; 
    endform;

    form formid = 0x1001,
        title  = STRING_TOKEN(STR_CHIPSET_FORM_TITLE);
        subtitle text = STRING_TOKEN(STR_CHIPSET_FORM_SUBTITLE);

        oneof varid = CpuClock.Clock,
            prompt      = STRING_TOKEN(STR_CHIPSET_CLOCK_CPU_PROMPT),
            help        = STRING_TOKEN(STR_CHIPSET_CLOCK_CPU_HELP),
            flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            option text = STRING_TOKEN(STR_CHIPSET_CLOCK_CPU_NA), value = 0, flags = DEFAULT;
            option text = STRING_TOKEN(STR_CHIPSET_CLOCK_CPU_600MHZ), value = 1, flags = 0;
            option text = STRING_TOKEN(STR_CHIPSET_CLOCK_CPU_MAX), value = 2, flags = 0;
        endoneof;

        oneof varid = SdIsArasan.Routing,
            prompt      = STRING_TOKEN(STR_CHIPSET_SD_PROMPT),
            help        = STRING_TOKEN(STR_CHIPSET_SD_HELP),
            flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            option text = STRING_TOKEN(STR_CHIPSET_SD_ARASAN), value = 1, flags = DEFAULT;
            option text = STRING_TOKEN(STR_CHIPSET_SD_SDHOST), value = 0, flags = 0;
        endoneof;
    endform;

    form formid = 0x1002,
        title  = STRING_TOKEN(STR_MMC_FORM_TITLE);
        subtitle text = STRING_TOKEN(STR_MMC_FORM_SUBTITLE);

        oneof varid = MmcForce1Bit.Force1Bit,
            prompt      = STRING_TOKEN(STR_MMC_FORCE1BIT_PROMPT),
            help        = STRING_TOKEN(STR_MMC_FORCE1BIT_HELP),
            flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            option text = STRING_TOKEN(STR_MMC_FORCE1BIT_N), value = 0, flags = DEFAULT;
            option text = STRING_TOKEN(STR_MMC_FORCE1BIT_Y), value = 1, flags = 0;
        endoneof;

        oneof varid = MmcForceDefaultSpeed.ForceDS,
            prompt      = STRING_TOKEN(STR_MMC_FORCEDS_PROMPT),
            help        = STRING_TOKEN(STR_MMC_FORCEDS_HELP),
            flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            option text = STRING_TOKEN(STR_MMC_FORCEDS_N), value = 0, flags = DEFAULT;
            option text = STRING_TOKEN(STR_MMC_FORCEDS_Y), value = 1, flags = 0;
        endoneof;

        numeric varid = MmcSdDefaultSpeedMHz.MHz,
             prompt  = STRING_TOKEN(STR_MMC_SD_DS_PROMPT),
             help    = STRING_TOKEN(STR_MMC_SD_DS_HELP),
             flags   = DISPLAY_UINT_DEC | NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
             minimum = 25,
             maximum = 100,
             default = 25,
        endnumeric;

        numeric varid = MmcSdHighSpeedMHz.MHz,
             prompt  = STRING_TOKEN(STR_MMC_SD_HS_PROMPT),
             help    = STRING_TOKEN(STR_MMC_SD_HS_HELP),
             flags   = DISPLAY_UINT_DEC | NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
             minimum = 50,
             maximum = 100,
             default = 50,
        endnumeric;
endform;

endformset;
